FROM registry.access.redhat.com/ubi9/ubi

USER root
WORKDIR /tmp/

ENV PATH=$PATH:/opt/conda/bin/

# Julia
ARG JULIA_VERSION=1.11
ARG UNAMEM1=x64
RUN if [ "x${JULIA_VERSION}" = "xnightly" ]; then \
    JULIA_URL=https://julialangnightlies-s3.julialang.org/bin/linux/$(uname -m) ;\
    JULIA_FILE=julia-latest-linux-$(uname -m).tar.gz ;\
    else \
    JULIA_URL=https://julialang-s3.julialang.org/bin/linux/${UNAMEM1}/${JULIA_VERSION} ;\
    JULIA_FILE=julia-${JULIA_VERSION}-latest-linux-$(uname -m).tar.gz ;\
    fi && \
    mkdir /opt/julia-${JULIA_VERSION} && \
    curl --location --remote-name ${JULIA_URL}/${JULIA_FILE} && \
    tar xzf ${JULIA_FILE} -C /opt/julia-${JULIA_VERSION} --strip-components=1 && \
    rm ${JULIA_FILE} && \
    ln --symbolic /opt/julia-${JULIA_VERSION}/bin/julia /usr/local/bin/julia && \
    julia --version

# GUROBIWLS
RUN --mount=type=secret,id=GUROBIWLS mkdir /opt/gurobi/ && \
    cat /run/secrets/GUROBIWLS | tee /opt/gurobi/gurobi.lic

# MathOptInterface
RUN julia --eval "using InteractiveUtils; versioninfo()" && \
    julia --eval "@ccall jl_dump_host_cpu()::Cvoid" && \
    julia --threads auto --eval "import Pkg; Pkg.add(\"MathOptInterface\")"
# Miniconda3
RUN curl --remote-name https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-$(uname -m).sh && \
    bash Miniconda3-latest-Linux-$(uname -m).sh -b -p /opt/conda && \
    rm Miniconda3-latest-Linux-$(uname -m).sh && \
    conda clean --all --yes
# CPLEX
RUN if [[ $(uname -m) == "x86_64" ]]; then true; else exit 0; fi && \
    conda create --yes --name pycpx --no-deps --channel ibmdecisionoptimization cplex && \
    conda clean --all --yes && \
    find /opt/conda/pkgs/ -type f -name libcplex*.so -ls -exec cp {} /usr/local/lib/ \; && \
    julia --threads auto --eval "(ENV[\"CPLEX_STUDIO_BINARIES\"] = \"/usr/local/lib/\"); import Pkg; Pkg.add(\"CPLEX\"); Pkg.test(\"CPLEX\")"
# Gurobi
RUN conda create --yes --name pygrb --no-deps --channel gurobi gurobi && \
    conda clean --all --yes && \
    find /opt/conda/pkgs/ -type f -name libgurobi*.so -ls -exec cp {} /usr/local/lib/ \; && \
    julia --threads auto --eval "(ENV[\"GUROBI_HOME\"] = \"/usr/local\"); import Pkg; Pkg.add(\"Gurobi\"); Pkg.test(\"Gurobi\")"
# Xpress
RUN conda create --yes --name pyxpr --no-deps --channel fico-xpress xpress=9.4 xpresslibs && \
    conda clean --all --yes && \
    find /opt/conda/pkgs/ -type f -name libxprs.so.* -ls -exec cp {} /usr/local/lib/libxprs.so \; && \
    find /opt/conda/pkgs/ -type f -name libxprl-*-x9.4.so -ls -exec cp {} /usr/local/lib/libxprl.so.x9.4 \; && \
    find /opt/conda/pkgs/ -type f -name community-xpauth.xpr -ls -exec cp {} /usr/local/xpauth.xpr \; && \
    julia --threads auto --eval "(ENV[\"XPRESSDIR\"] = \"/usr/local\"); import Pkg; Pkg.add(\"Xpress\"); Pkg.test(\"Xpress\")"

# AMPLpy
RUN python -m pip --no-cache-dir install amplpy --upgrade
# CPLEX
RUN if [[ $(uname -m) == "x86_64" ]]; then true; else exit 0; fi && \
    python -m amplpy.modules install cplex && \
    find /opt/conda/lib/python3.12/site-packages/ -type f -name libcplex*.so -ls
# Gurobi
RUN python -m amplpy.modules install gurobi && \
    find /opt/conda/lib/python3.12/site-packages/ -type f -name libgurobi*.so -ls
# Xpress
RUN python -m amplpy.modules install xpress && \
    find /opt/conda/lib/python3.12/site-packages/ -type f -name libxprs.so.* -ls && \
    find /opt/conda/lib/python3.12/site-packages/ -type f -name libxprl.so.* -ls && \
    find /opt/conda/lib/python3.12/site-packages/ -type f -name xpauth.xpr -ls
