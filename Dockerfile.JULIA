ARG TARGET=julia

###############
# Stage julia #
###############

FROM registry.access.redhat.com/ubi10/ubi-minimal AS julia

USER root
WORKDIR /tmp/

ENV PATH=$PATH:/opt/conda/bin/
# https://github.com/JuliaCI/julia-buildkite/blob/main/utilities/build_envs.sh
#   CPU_TARGET="generic;cortex-a76,clone_all;neoverse-n1,base(1)"
#   CPU_TARGET="generic;sandybridge,-xsaveopt,clone_all;haswell,-rdrnd,base(1);x86-64-v4,-rdrnd,base(1)"
ARG JULIA_CPU_TARGET=generic
ARG JULIA_VERSION=1.11
ARG CONDA_PLUGINS_AUTO_ACCEPT_TOS=true

RUN microdnf --assumeyes install git-core procps-ng unzip zip && \
    microdnf --assumeyes install tar gzip findutils && \
    microdnf clean all

RUN curl --remote-name https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-$(uname -m).sh && \
    bash Miniconda3-latest-Linux-$(uname -m).sh -b -p /opt/conda && \
    rm Miniconda3-latest-Linux-$(uname -m).sh && \
    conda clean --all --yes && \
    conda info

RUN conda install --quiet --yes jupyterlab jupyterhub-singleuser nb_conda_kernels && \
    conda clean --all --yes && \
    jupyter --version && \
    jupyterhub --version

RUN if [ "x${JULIA_VERSION}" = "xnightly" ]; then \
        JULIA_URL=https://julialangnightlies-s3.julialang.org/bin/linux/$(uname -m) ;\
        JULIA_FILE=julia-latest-linux-$(uname -m).tar.gz ;\
    else \
        if [ "$(uname -m)" = "x86_64"  ]; then \
            JULIA_URL=https://julialang-s3.julialang.org/bin/linux/x64/${JULIA_VERSION} ;\
        else \
            JULIA_URL=https://julialang-s3.julialang.org/bin/linux/$(uname -m)/${JULIA_VERSION} ;\
        fi ;\
        JULIA_FILE=julia-${JULIA_VERSION}-latest-linux-$(uname -m).tar.gz ;\
    fi && \
    mkdir /opt/julia-${JULIA_VERSION} && \
    echo ${JULIA_URL}/${JULIA_FILE} && \
    curl --location --remote-name ${JULIA_URL}/${JULIA_FILE} && \
    tar xzf ${JULIA_FILE} -C /opt/julia-${JULIA_VERSION} --strip-components=1 && \
    rm ${JULIA_FILE} && \
    ln --symbolic /opt/julia-${JULIA_VERSION}/bin/julia /usr/local/bin/julia && \
    julia --version

EXPOSE 8888/tcp
ENTRYPOINT ["jupyterhub-singleuser"]
CMD [""]

RUN useradd --create-home --no-user-group jovyan
VOLUME /home/jovyan/work
USER jovyan
WORKDIR /home/jovyan/

COPY setup.jl      /opt/
COPY setupAMPL.sh  /opt/
COPY setupORlib.sh /opt/
RUN julia --threads auto --eval "using InteractiveUtils; versioninfo(); @ccall jl_dump_host_cpu()::Cvoid"
RUN julia --threads auto --eval "import Pkg; Pkg.add(\"IJulia\")"
RUN sh /opt/setupORlib.sh
RUN julia --threads auto /opt/setup.jl

####################
# Stage julia-cuda #
####################

FROM julia AS julia-cuda

ARG JULIA_CPU_TARGET=generic

RUN julia --threads auto --eval "using InteractiveUtils; versioninfo(); @ccall jl_dump_host_cpu()::Cvoid"

RUN julia --threads auto <<EOF
    filelp = joinpath(homedir(), ".julia/environments")
    filelp = joinpath(filelp, "v\$(Base.VERSION.major).\$(Base.VERSION.minor)")
    mkpath(filelp)
    filelp = joinpath(filelp, "LocalPreferences.toml")
    write(filelp, "[CUDA_Runtime_jll]\nversion = \"12.9\"\n")
    import Pkg
    Pkg.add("CUDA_Runtime_jll")
    Pkg.add("CUDA")
    import CUDA
    CUDA.precompile_runtime()
EOF

RUN julia --threads auto <<EOF
    import Pkg
    Pkg.add("CUDA_Runtime_jll")
    import CUDA_Runtime_jll
    @show CUDA_Runtime_jll.host_platform
EOF

RUN julia --threads auto <<EOF
    import Pkg
    Pkg.add("CUDA_Compiler_jll")
    import CUDA_Compiler_jll
    @show CUDA_Compiler_jll.host_platform
EOF

#################
# Stage $TARGET #
#################

FROM ${TARGET} AS final
