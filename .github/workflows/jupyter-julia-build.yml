name: Jupyter Julia Builder
on:
  workflow_call:
    inputs:
      julia_ver:
        required: true
        type: string
      julia_verx:
        required: true
        type: string
      julia_cuda:
        required: true
        type: boolean
      fecha:
        required: true
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
jobs:
  build:
    continue-on-error: ${{ inputs.julia_ver == '1.12' }}
    strategy:
      matrix:
        arch:
          - runson: ubuntu-24.04
            tagarch: x86_64
            cpuarch: generic;sandybridge,-xsaveopt,clone_all;haswell,-rdrnd,base(1);x86-64-v4,-rdrnd,base(1)
          - runson: ubuntu-24.04-arm
            tagarch: aarch64
            cpuarch: generic;cortex-a76,clone_all;neoverse-n1,base(1)
    runs-on: ${{ matrix.arch.runson }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # Dockerfile.JULIA - julia
      - uses: docker/build-push-action@v5
        with:
          push: true
          file: Dockerfile.JULIA
          build-args: |
            TARGET=julia
            JULIA_CPU_TARGET=${{ matrix.arch.cpuarch }}
            JULIA_VERSION=${{ inputs.julia_ver }}
          tags: rlinfati/jupyter-lab0:julia-${{ inputs.julia_verx }}-${{ matrix.arch.tagarch }}-${{ inputs.fecha }}
      # Dockerfile.JULIA - julia-cuda
      - uses: docker/build-push-action@v5
        if: ${{ inputs.julia_cuda && matrix.arch.tagarch == 'x86_64' }}
        with:
          push: true
          file: Dockerfile.JULIA
          build-args: |
            TARGET=julia-cuda
            JULIA_CPU_TARGET=${{ matrix.arch.cpuarch }}
            JULIA_VERSION=${{ inputs.julia_ver }}
          tags: rlinfati/jupyter-lab0:julia-${{ inputs.julia_verx }}-cuda-${{ matrix.arch.tagarch }}-${{ inputs.fecha }}
  manifest:
    continue-on-error: ${{ inputs.julia_ver == '1.12' }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - run:  echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - run: |
          set -ex
          DIGEST_AMD64=$(docker manifest inspect rlinfati/jupyter-lab0:julia-${{ inputs.julia_verx }}-x86_64-${{ inputs.fecha }}  | jq -r '.manifests[] | select(.platform.architecture=="amd64") | .digest')
          DIGEST_ARM64=$(docker manifest inspect rlinfati/jupyter-lab0:julia-${{ inputs.julia_verx }}-aarch64-${{ inputs.fecha }} | jq -r '.manifests[] | select(.platform.architecture=="arm64") | .digest')
          docker manifest create rlinfati/jupyter-lab0:julia-${{ inputs.julia_verx }}-${{ inputs.fecha }} \
            rlinfati/jupyter-lab0@$DIGEST_AMD64 \
            rlinfati/jupyter-lab0@$DIGEST_ARM64
          docker manifest push rlinfati/jupyter-lab0:julia-${{ inputs.julia_verx }}-${{ inputs.fecha }}
      - run: |
          set -ex
          DIGEST_AMD64=$(docker manifest inspect rlinfati/jupyter-lab0:julia-${{ inputs.julia_verx }}-cuda-x86_64-${{ inputs.fecha }}  | jq -r '.manifests[] | select(.platform.architecture=="amd64") | .digest')
          docker manifest create rlinfati/jupyter-lab0:julia-${{ inputs.julia_verx }}-cuda-${{ inputs.fecha }} \
            rlinfati/jupyter-lab0@$DIGEST_AMD64
          docker manifest push rlinfati/jupyter-lab0:julia-${{ inputs.julia_verx }}-cuda-${{ inputs.fecha }}
        if: ${{ inputs.julia_cuda }}
